<UserControl xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			 xmlns:local="clr-namespace:StdEqpTesting.View"
			 xmlns:loc="clr-namespace:StdEqpTesting.Localization"
			 xmlns:viewmodel="clr-namespace:StdEqpTesting.ViewModel"
			 xmlns:Converter="clr-namespace:StdEqpTesting.Converter"
			 x:Class="StdEqpTesting.View.NavTest"
			 d:DataContext="{d:DesignInstance Type={x:Type viewmodel:MainViewModel}}"
			 mc:Ignorable="d"
			 d:DesignHeight="500"
			 d:DesignWidth="800">
	<!--This keeps the designer happy. The real resource is inherited from HomeViewWindow.-->
	<d:UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="pack://application:,,,/Theme/Dark.xaml" />
				<ResourceDictionary Source="pack://application:,,,/View/GlobalRescDict.xaml" />
			</ResourceDictionary.MergedDictionaries>
		</ResourceDictionary>
	</d:UserControl.Resources>
	<!--Converters needs to be specified again, for some reason it can't get thing from RescDic.-->
	<UserControl.Resources>
		<Converter:IsObjectNullConverter x:Key="IsObjectNullConverter" />
		<Converter:LogicalNotConverter x:Key="LogicalNotConverter" />
		<Converter:InvertedBool2VisibilityConverter x:Key="InvertedBool2VisibilityConverter" />
		<Converter:Bool2VisibilityConverter x:Key="Bool2VisibilityConverter" />
	</UserControl.Resources>
	<UserControl.InputBindings>
		<KeyBinding Key="F5"
					Command="{Binding NavTestVM.ReGetCOMListCommand, Mode=OneWay}" />
	</UserControl.InputBindings>
	<TabControl Margin="10,5"
				BorderThickness="0"
				Background="Transparent"
				SelectedIndex="{Binding NavTestVM.TabIndex}"
				ItemsSource="{Binding NavTestVM.TabItemSource, Mode=OneWay}"
				d:ItemsSource="{d:SampleData ItemCount=5}">
		<TabControl.Resources>
			<!--#region TabItem global style-->
			<SolidColorBrush x:Key="TabItem.MouseOver.Background"
							 Color="Transparent" />
			<SolidColorBrush x:Key="TabItem.Selected.Background"
							 Color="Transparent" />
			<SolidColorBrush x:Key="TabItem.Selected.Border"
							 Color="CornflowerBlue" />
			<SolidColorBrush x:Key="TabItem.Disabled.Background"
							 Color="Transparent" />
			<SolidColorBrush x:Key="TabItem.Disabled.Border"
							 Color="Red" />
			<Style TargetType="{x:Type TabItem}">
				<Setter Property="Foreground"
						Value="{DynamicResource GlobalFG}" />
				<Setter Property="Background"
						Value="Transparent" />
				<Setter Property="BorderBrush"
						Value="{DynamicResource CheckedTabBG}" />
				<Setter Property="BorderThickness"
						Value="2" />
				<Setter Property="FontWeight"
						Value="Bold" />
				<Setter Property="FontSize"
						Value="14" />
				<Setter Property="FontFamily"
						Value="Cascadia Code" />
				<Setter Property="Margin"
						Value="0,0,0,-3" />
				<Setter Property="Padding"
						Value="5,0" />
				<Setter Property="HorizontalContentAlignment"
						Value="Stretch" />
				<Setter Property="VerticalContentAlignment"
						Value="Stretch" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TabItem}">
							<Grid x:Name="templateRoot"
								  SnapsToDevicePixels="true">
								<Border x:Name="mainBorder"
										Background="{TemplateBinding Background}"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="1,1,1,0"
										Margin="0">
									<Border x:Name="innerBorder"
											Background="{StaticResource TabItem.Selected.Background}"
											BorderBrush="{StaticResource TabItem.Selected.Border}"
											BorderThickness="1,1,1,0"
											Margin="-1"
											Opacity="0" />
								</Border>
								<ContentPresenter x:Name="contentPresenter"
												  ContentSource="Header"
												  Focusable="False"
												  HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
												  Margin="{TemplateBinding Padding}"
												  RecognizesAccessKey="True"
												  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
												  VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
							</Grid>
							<ControlTemplate.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
												   Value="true" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
												   Value="Top" />
									</MultiDataTrigger.Conditions>
									<Setter Property="Background"
											TargetName="mainBorder"
											Value="{StaticResource TabItem.MouseOver.Background}" />
									<Setter Property="BorderBrush"
											TargetName="mainBorder"
											Value="{DynamicResource TabMouseOverBD}" />
									<Setter Property="BorderThickness"
											TargetName="innerBorder"
											Value="1,1,1,0" />
									<Setter Property="BorderThickness"
											TargetName="mainBorder"
											Value="1,1,1,0" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
												   Value="false" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
												   Value="Top" />
									</MultiDataTrigger.Conditions>
									<Setter Property="Opacity"
											TargetName="contentPresenter"
											Value="0.56" />
									<Setter Property="Background"
											TargetName="mainBorder"
											Value="{StaticResource TabItem.Disabled.Background}" />
									<Setter Property="BorderBrush"
											TargetName="mainBorder"
											Value="{StaticResource TabItem.Disabled.Border}" />
									<Setter Property="BorderThickness"
											TargetName="innerBorder"
											Value="1,1,1,0" />
									<Setter Property="BorderThickness"
											TargetName="mainBorder"
											Value="1,1,1,0" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
												   Value="false" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
												   Value="Top" />
									</MultiDataTrigger.Conditions>
									<Setter Property="BorderThickness"
											TargetName="innerBorder"
											Value="1,1,1,0" />
									<Setter Property="BorderThickness"
											TargetName="mainBorder"
											Value="1,1,1,0" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
												   Value="true" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
												   Value="Top" />
									</MultiDataTrigger.Conditions>
									<Setter Property="Panel.ZIndex"
											Value="1" />
									<Setter Property="Margin"
											Value="0,0,0,-2" />
									<Setter Property="Padding"
											Value="5,0" />
									<Setter Property="Opacity"
											TargetName="innerBorder"
											Value="1" />
									<Setter Property="BorderThickness"
											TargetName="innerBorder"
											Value="1,1,1,4" />
									<Setter Property="BorderThickness"
											TargetName="mainBorder"
											Value="1,1,1,0" />
								</MultiDataTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<!--#endregion-->
			<Style x:Key="ExpanderUpHeaderStyle"
				   TargetType="{x:Type ToggleButton}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border x:Name="border"
									BorderThickness="1"
									HorizontalAlignment="Center"
									BorderBrush="Gray">
								<Label Content="{x:Static loc:Loc.PortPropExpander}"
									   Padding="0,5,0,-5"
									   Foreground="{DynamicResource GlobalFG}"
									   d:Foreground="White"
									   HorizontalAlignment="Center" />
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver"
										 Value="True">
									<Setter TargetName="border"
											Property="BorderBrush"
											Value="CornflowerBlue" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="PortPropExpanderStyle"
				   TargetType="{x:Type Expander}">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="Background"
						Value="Transparent" />
				<Setter Property="HorizontalContentAlignment"
						Value="Stretch" />
				<Setter Property="VerticalContentAlignment"
						Value="Stretch" />
				<Setter Property="BorderBrush"
						Value="Transparent" />
				<Setter Property="BorderThickness"
						Value="0" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Expander}">
							<Border Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"
									CornerRadius="3"
									SnapsToDevicePixels="true">
								<DockPanel>
									<ToggleButton x:Name="HeaderSite"
												  ContentTemplate="{TemplateBinding HeaderTemplate}"
												  Content="{TemplateBinding Header}"
												  ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
												  DockPanel.Dock="Top"
												  FontStretch="{TemplateBinding FontStretch}"
												  Foreground="{TemplateBinding Foreground}"
												  FontStyle="{TemplateBinding FontStyle}"
												  FontFamily="{TemplateBinding FontFamily}"
												  FontWeight="{TemplateBinding FontWeight}"
												  FontSize="{TemplateBinding FontSize}"
												  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
												  IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
												  Margin="1"
												  MinWidth="0"
												  MinHeight="0"
												  Padding="{TemplateBinding Padding}"
												  Style="{StaticResource ExpanderUpHeaderStyle}"
												  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
									<ContentPresenter x:Name="ExpandSite"
													  DockPanel.Dock="Bottom"
													  Focusable="false"
													  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
													  Margin="{TemplateBinding Padding}"
													  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
													  Visibility="Collapsed" />
								</DockPanel>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsExpanded"
										 Value="true">
									<Setter Property="Visibility"
											TargetName="ExpandSite"
											Value="Visible" />
								</Trigger>
								<Trigger Property="ExpandDirection"
										 Value="Up">
									<Setter Property="DockPanel.Dock"
											TargetName="ExpandSite"
											Value="Top" />
									<Setter Property="DockPanel.Dock"
											TargetName="HeaderSite"
											Value="Bottom" />
									<Setter Property="Style"
											TargetName="HeaderSite"
											Value="{StaticResource ExpanderUpHeaderStyle}" />
								</Trigger>
								<Trigger Property="IsEnabled"
										 Value="false">
									<Setter Property="Foreground"
											Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</TabControl.Resources>
		<TabControl.ContentTemplate>
			<DataTemplate>
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="200" />
					</Grid.ColumnDefinitions>
					<!--Decorative border-->
					<Border BorderThickness="2"
							BorderBrush="CornflowerBlue"
							Grid.ColumnSpan="2">
						<Border.OpacityMask>
							<ImageBrush ImageSource="/View/TabOpacityMask.png" />
						</Border.OpacityMask>
					</Border>
					<!--No COM Port-->
					<StackPanel Grid.Column="0"
								Visibility="{Binding NoCOM, Converter={StaticResource Bool2VisibilityConverter}, Mode=OneWay}"
								d:Visibility="Collapsed">
						<Label Content="{x:Static loc:Loc.NoCOMTabHeader}"
							   HorizontalAlignment="Center"
							   FontSize="25"
							   Margin="0,20,0,0"
							   FontWeight="Bold"
							   Foreground="Red" />
						<Label Content="{x:Static loc:Loc.NoCOMTabInstruction}"
							   HorizontalAlignment="Center"
							   FontSize="15" />
						<Button Content="{x:Static loc:Loc.RefreshBtn}"
								Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}, Mode=FindAncestor}, Path=DataContext.NavTestVM.ReGetCOMListCommand, Mode=OneWay}"
								Margin="0,10,0,0"
								FontSize="15"
								Height="50"
								Width="100" />
					</StackPanel>
					<!--Has COM Port, all the main controls are here-->
					<Grid Grid.Column="0"
						  Visibility="{Binding NoCOM, Converter={StaticResource InvertedBool2VisibilityConverter}, Mode=OneWay}">
						<Grid.RowDefinitions>
							<RowDefinition Height="*"
										   MinHeight="110" />
							<RowDefinition Height="*"
										   MinHeight="180" />
						</Grid.RowDefinitions>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"
											  MinWidth="140" />
							<ColumnDefinition Width="*"
											  MinWidth="180" />
						</Grid.ColumnDefinitions>
						<!--#region Resize thing-->
						<Ellipse Width="4"
								 Height="4"
								 Margin="-2"
								 d:Fill="White"
								 Fill="{DynamicResource GlobalFG}"
								 HorizontalAlignment="Right"
								 VerticalAlignment="Bottom"
								 Focusable="False" />
						<GridSplitter HorizontalAlignment="Right"
									  VerticalAlignment="Bottom"
									  ResizeDirection="Rows"
									  Width="40"
									  Height="8"
									  Margin="-20,-4"
									  Background="Transparent"
									  Focusable="False" />
						<GridSplitter HorizontalAlignment="Right"
									  VerticalAlignment="Bottom"
									  ResizeDirection="Columns"
									  Width="8"
									  Height="40"
									  Margin="-4,-20"
									  Background="Transparent"
									  Focusable="False" />
						<!--#endregion-->
						<DockPanel Grid.Row="0"
								   Grid.Column="0">
							<Expander Style="{DynamicResource PortPropExpanderStyle}"
									  DockPanel.Dock="Top"
									  HorizontalContentAlignment="Center"
									  VerticalContentAlignment="Top"
									  ExpandDirection="Up"
									  Margin="0,5,0,2"
									  Focusable="False"
									  IsExpanded="{Binding PropExpanded}">
								<Grid DockPanel.Dock="Top"
									  Height="Auto"
									  Margin="10,0">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="*" />
										<RowDefinition Height="*" />
										<RowDefinition Height="*" />
										<RowDefinition Height="*" />
									</Grid.RowDefinitions>
									<Grid.Resources>
										<d:Style TargetType="{x:Type Label}">
											<Setter Property="Foreground"
													Value="White" />
										</d:Style>
									</Grid.Resources>
									<StackPanel Grid.Row="0"
												Grid.Column="0"
												Orientation="Horizontal"
												HorizontalAlignment="Right">
										<Label Content="{Binding BaudRate, Mode=OneWay}" />
										<Label Content="{x:Static loc:Loc.BaudRate}"
											   FontWeight="Bold" />
									</StackPanel>
									<StackPanel Grid.Row="1"
												Grid.Column="0"
												Orientation="Horizontal"
												HorizontalAlignment="Right">
										<Label Content="{Binding Parity, Mode=OneWay}" />
										<Label Content="{x:Static loc:Loc.Parity}"
											   FontWeight="Bold" />
									</StackPanel>
									<StackPanel Grid.Row="2"
												Grid.Column="0"
												Orientation="Horizontal"
												HorizontalAlignment="Right">
										<Label Content="{Binding DataBits, Mode=OneWay}" />
										<Label Content="{x:Static loc:Loc.DataBits}"
											   FontWeight="Bold" />
									</StackPanel>
									<StackPanel Grid.Row="3"
												Grid.Column="0"
												Orientation="Horizontal"
												HorizontalAlignment="Right">
										<Label Content="{Binding StopBits, Mode=OneWay}" />
										<Label Content="{x:Static loc:Loc.StopBits}"
											   FontWeight="Bold" />
									</StackPanel>
									<StackPanel Grid.Row="0"
												Grid.Column="1"
												Orientation="Horizontal">
										<Label Content="{x:Static loc:Loc.Handshake}"
											   FontWeight="Bold" />
										<Label Content="{Binding Handshake, Mode=OneWay}" />
									</StackPanel>
									<StackPanel Grid.Row="1"
												Grid.Column="1"
												Orientation="Horizontal">
										<Label Content="{x:Static loc:Loc.Encoding}"
											   FontWeight="Bold" />
										<Label Content="{Binding Encoding, Mode=OneWay}" />
									</StackPanel>
									<StackPanel Grid.Row="2"
												Grid.Column="1"
												Orientation="Horizontal">
										<Label Content="{x:Static loc:Loc.ReadT}"
											   FontWeight="Bold" />
										<Label Content="{Binding ReadTimeout, Mode=OneWay}" />
									</StackPanel>
									<StackPanel Grid.Row="3"
												Grid.Column="1"
												Orientation="Horizontal">
										<Label Content="{x:Static loc:Loc.WriteT}"
											   FontWeight="Bold" />
										<Label Content="{Binding WriteTimeout, Mode=OneWay}" />
									</StackPanel>
								</Grid>
							</Expander>
							<Button DockPanel.Dock="Bottom"
									FontSize="20"
									MinHeight="60"
									MinWidth="100"
									Command="{Binding ConnectCommand, Mode=OneWay}"
									Margin="10,0">
								<Button.Style>
									<Style TargetType="{x:Type Button}">
										<Setter Property="Background"
												Value="{DynamicResource GlobalBG}" />
										<d:Setter Property="Background"
												  Value="Transparent" />
										<Setter Property="BorderBrush"
												Value="Gray" />
										<Setter Property="Foreground"
												Value="{DynamicResource GlobalFG}" />
										<d:Setter Property="Foreground"
												  Value="White" />
										<Setter Property="BorderThickness"
												Value="2" />
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type ButtonBase}">
													<Border x:Name="border"
															Background="{TemplateBinding Background}"
															BorderBrush="{TemplateBinding BorderBrush}"
															BorderThickness="{TemplateBinding BorderThickness}"
															SnapsToDevicePixels="true">
														<StackPanel HorizontalAlignment="Center"
																	VerticalAlignment="Center">
															<ContentPresenter x:Name="contentPresenter"
																			  Focusable="False"
																			  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
																			  Margin="{TemplateBinding Padding}"
																			  RecognizesAccessKey="True"
																			  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
																			  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
															<Border BorderBrush="Gray"
																	BorderThickness="2"
																	CornerRadius="10"
																	SnapsToDevicePixels="False"
																	Margin="0,4,0,0">
																<Rectangle x:Name="rect"
																		   Fill="DarkGray"
																		   Height="20"
																		   RadiusX="10"
																		   RadiusY="8" />
															</Border>
														</StackPanel>
													</Border>
													<ControlTemplate.Triggers>
														<Trigger Property="Button.IsDefaulted"
																 Value="true">
															<Setter Property="BorderBrush"
																	TargetName="border"
																	Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
														</Trigger>
														<Trigger Property="IsMouseOver"
																 Value="true">
															<Setter Property="BorderBrush"
																	TargetName="border"
																	Value="{DynamicResource GlobalMouseoverBD}" />
															<Trigger.EnterActions>
																<BeginStoryboard>
																	<Storyboard>
																		<ThicknessAnimation Storyboard.TargetProperty="BorderThickness"
																							From="2"
																							To="3"
																							Duration="0:0:0.5">
																			<ThicknessAnimation.EasingFunction>
																				<CircleEase EasingMode="EaseOut" />
																			</ThicknessAnimation.EasingFunction>
																		</ThicknessAnimation>
																	</Storyboard>
																</BeginStoryboard>
															</Trigger.EnterActions>
															<Trigger.ExitActions>
																<BeginStoryboard>
																	<Storyboard>
																		<ThicknessAnimation Storyboard.TargetProperty="BorderThickness"
																							From="3"
																							To="2"
																							AccelerationRatio="0.8"
																							Duration="0:0:0.2" />
																	</Storyboard>
																</BeginStoryboard>
															</Trigger.ExitActions>
														</Trigger>
														<Trigger Property="IsPressed"
																 Value="true">
															<Setter Property="Background"
																	TargetName="border"
																	Value="{DynamicResource GlobalPressedBG}" />
															<Setter Property="BorderBrush"
																	TargetName="border"
																	Value="{DynamicResource GlobalPressedBD}" />
														</Trigger>
														<DataTrigger Binding="{Binding PortOpened}"
																	 Value="True">
															<Setter TargetName="rect"
																	Property="Fill"
																	Value="Lime" />
														</DataTrigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
										<Setter Property="Content"
												Value="{x:Static loc:Loc.OpenPort}" />
										<Style.Triggers>
											<DataTrigger Binding="{Binding PortOpened}"
														 Value="True">
												<Setter Property="Content"
														Value="{x:Static loc:Loc.ClosePort}" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Button.Style>
							</Button>
						</DockPanel>
						<Grid Grid.Row="0"
							  Grid.Column="1"
							  Margin="10,0">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="*"
											   MinHeight="25" />
								<RowDefinition Height="Auto"
											   MinHeight="30" />
							</Grid.RowDefinitions>
							<Label Grid.Row="0"
								   d:Foreground="White"
								   FontSize="15"
								   Content="{x:Static loc:Loc.RecvStr}" />
							<TextBox Grid.Row="1"
									 TextWrapping="Wrap"
									 Text="{Binding Message, UpdateSourceTrigger=PropertyChanged}"
									 FontSize="22"
									 HorizontalAlignment="Stretch"
									 VerticalAlignment="Stretch" />
							<DockPanel Grid.Row="2"
									   Margin="0,0,0,-10">
								<StackPanel DockPanel.Dock="Left"
											VerticalAlignment="Center">
									<CheckBox VerticalAlignment="Center"
											  x:Name="AutoAddBtn"
											  Foreground="{DynamicResource GlobalFG}"
											  Content="{x:Static loc:Loc.AutoAddRecvStr}"
											  ToolTip="{x:Static loc:Loc.AutoAddRecvStrTT}"
											  IsChecked="{Binding AutoAdd}" />
									<CheckBox VerticalAlignment="Center"
											  Margin="0,5,0,0"
											  Foreground="{DynamicResource GlobalFG}"
											  IsEnabled="{Binding IsChecked, Converter={StaticResource LogicalNotConverter}, ElementName=AutoAddBtn}"
											  IsEnabledChanged="AutoClear_IsEnabledChanged"
											  Content="{x:Static loc:Loc.ClearAfterAddingRecvStr}"
											  ToolTipService.ShowOnDisabled="True"
											  IsChecked="{Binding AutoClear}">
										<CheckBox.Style>
											<Style TargetType="{x:Type CheckBox}">
												<Setter Property="ToolTip"
														Value="{x:Static loc:Loc.ClearAfterAddingRecvStrTT}" />
												<Style.Triggers>
													<Trigger Property="IsEnabled"
															 Value="False">
														<Setter Property="ToolTip"
																Value="{x:Static loc:Loc.ClearAfterAddingRecvStrDisabledTT}" />
													</Trigger>
												</Style.Triggers>
											</Style>
										</CheckBox.Style>
									</CheckBox>
								</StackPanel>
								<Button DockPanel.Dock="Right"
										Margin="10,10,0,10"
										Command="{Binding Add2ListCommand, Mode=OneWay}"
										MinHeight="40"
										FontSize="20"
										Content="{x:Static loc:Loc.AddRecvStr}" />
							</DockPanel>
						</Grid>
						<StackPanel Grid.Row="1"
									Grid.Column="0"
									Margin="10,0">
							<Label Content="{x:Static loc:Loc.TestName}"
								   d:Foreground="White"
								   FontSize="15" />
							<TextBox FontSize="20"
									 Text="{Binding TestName}" />
							<DockPanel>
								<Button Content="{x:Static loc:Loc.AddUnit}"
										ToolTip="{x:Static loc:Loc.AddUnitTT}"
										Click="AddUnit_Button_Click"
										Margin="10,10,0,0"
										Width="100"
										FontSize="15"
										DockPanel.Dock="Right" />
								<Label DockPanel.Dock="Top"
									   d:Foreground="White"
									   Content="{x:Static loc:Loc.UoM}"
									   FontSize="15" />
								<ComboBox Style="{DynamicResource ComboBoxStyle}"
										  ItemsSource="{Binding UnitList, Mode=OneWay}"
										  DockPanel.Dock="Bottom"
										  Foreground="{DynamicResource GlobalFG}"
										  Text="{Binding MeaUnit}"
										  IsEditable="True"
										  FontSize="18" />
							</DockPanel>
						</StackPanel>
						<DockPanel Grid.Row="1"
								   Grid.Column="1">
							<Grid DockPanel.Dock="Bottom">
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition />
								</Grid.ColumnDefinitions>
								<Button Height="50"
										Grid.Column="0"
										FontSize="15"
										Content="{x:Static loc:Loc.SaveAvg}"
										Margin="10,0,5,0"
										Command="{Binding SaveValueCommand, Mode=OneWay}" />
								<Button Height="50"
										Grid.Column="1"
										FontSize="15"
										Content="{x:Static loc:Loc.SaveSel}"
										IsEnabled="{Binding SelectedItem, ConverterParameter=True, Converter={StaticResource IsObjectNullConverter}, ElementName=DataBox}"
										Margin="5,0,10,0"
										Command="{Binding SaveValueCommand, Mode=OneWay}"
										CommandParameter="{Binding ElementName=DataBox, Path=SelectedItem, Mode=OneWay}" />
							</Grid>
							<Label Content="{x:Static loc:Loc.AddInfo}"
								   Margin="10,0,0,0"
								   d:Foreground="White"
								   FontSize="15"
								   DockPanel.Dock="Top" />
							<TextBox DockPanel.Dock="Top"
									 Text="{Binding AdditionalInfo}"
									 FontSize="18"
									 Margin="10,0" />
							<Label Content="{x:Static loc:Loc.Average}"
								   ToolTip="{x:Static loc:Loc.AverageTT}"
								   Margin="10,0,0,0"
								   d:Foreground="White"
								   FontSize="15"
								   DockPanel.Dock="Top" />
							<TextBox DockPanel.Dock="Top"
									 Text="{Binding Average}"
									 ToolTip="{x:Static loc:Loc.AverageTT}"
									 IsReadOnly="True"
									 FontSize="20"
									 Margin="10,0,10,10" />
						</DockPanel>
					</Grid>
					<!--data view-->
					<DockPanel Grid.Column="1">
						<Label Content="{x:Static loc:Loc.SaveDataTitle}"
							   FontFamily="Bahnschrift"
							   FontSize="20"
							   Margin="0,-22,0,0"
							   DockPanel.Dock="Top" />
						<ListBox x:Name="DataBox"
								 DockPanel.Dock="Bottom"
								 Foreground="{DynamicResource GlobalFG}"
								 Background="Transparent"
								 ItemsSource="{Binding DataListBox}"
								 FontFamily="Consolas"
								 HorizontalContentAlignment="Stretch"
								 d:ItemsSource="{d:SampleData ItemCount=5}">
							<ListBox.ItemTemplate>
								<DataTemplate>
									<DockPanel HorizontalAlignment="Stretch">
										<TextBlock DockPanel.Dock="Left"
												   Text="{Binding Index, StringFormat=\{0:D2\}}"
												   VerticalAlignment="Center"
												   Padding="0,0,4,0" />
										<Separator DockPanel.Dock="Left"
												   Width="1"
												   Background="Gray"
												   Margin="0,6,5,6" />
										<TextBlock DockPanel.Dock="Left"
												   VerticalAlignment="Center"
												   FontSize="20"
												   Text="{Binding Value}"
												   Margin="0,-2,0,0" />
										<Button DockPanel.Dock="Right"
												Click="RmData_Button_Click"
												FontFamily="Webdings"
												Content="r"
												BorderBrush="Red"
												Width="20"
												Height="20"
												HorizontalAlignment="Right"
												Padding="0,0,0.5,0.6" />
									</DockPanel>
								</DataTemplate>
							</ListBox.ItemTemplate>
						</ListBox>
					</DockPanel>
				</Grid>
			</DataTemplate>
		</TabControl.ContentTemplate>
		<TabControl.ItemTemplate>
			<DataTemplate>
				<Label Content="{Binding PortName}" />
			</DataTemplate>
		</TabControl.ItemTemplate>
	</TabControl>
</UserControl>