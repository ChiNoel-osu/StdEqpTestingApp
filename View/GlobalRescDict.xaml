<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:Converter="clr-namespace:StdEqpTesting.Converter"
					xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">
	<Style TargetType="{x:Type Label}">
		<Setter Property="Foreground"
				Value="{DynamicResource GlobalFG}" />
	</Style>
	<Style TargetType="{x:Type TextBlock}">
		<Setter Property="Foreground"
				Value="{DynamicResource GlobalFG}" />
	</Style>
	<Style TargetType="{x:Type TextBox}">
		<Setter Property="Background"
				Value="{DynamicResource TextBoxBG}" />
		<Setter Property="Foreground"
				Value="{DynamicResource GlobalFG}" />
		<Setter	Property="CaretBrush"
				Value="{DynamicResource GlobalCaret}" />
	</Style>
	<Style TargetType="{x:Type Separator}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Rectangle Height="{TemplateBinding Height}"
							   Fill="{TemplateBinding Background}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#region GlobalButtonStyle-->
	<SolidColorBrush x:Key="Button.Static.Border"
					 Color="Gray" />
	<SolidColorBrush x:Key="Button.Disabled.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="Button.Disabled.Border"
					 Color="Red" />
	<SolidColorBrush x:Key="Button.Disabled.Foreground"
					 Color="DarkGray" />
	<Style TargetType="{x:Type Button}">
		<Setter Property="Background"
				Value="{DynamicResource GlobalBG}" />
		<Setter Property="BorderBrush"
				Value="{StaticResource Button.Static.Border}" />
		<Setter Property="Foreground"
				Value="{DynamicResource GlobalFG}" />
		<Setter Property="BorderThickness"
				Value="2" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Padding"
				Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Border x:Name="border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true">
						<ContentPresenter x:Name="contentPresenter"
										  Focusable="False"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  Margin="{TemplateBinding Padding}"
										  RecognizesAccessKey="True"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Button.IsDefaulted"
								 Value="true">
							<Setter Property="BorderBrush"
									TargetName="border"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Setter Property="Background"
									TargetName="border"
									Value="{DynamicResource GlobalMouseoverBG}" />
							<Setter Property="BorderBrush"
									TargetName="border"
									Value="{DynamicResource GlobalMouseoverBD}" />
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<ThicknessAnimation Storyboard.TargetProperty="BorderThickness"
															From="2"
															To="3"
															Duration="0:0:0.5">
											<ThicknessAnimation.EasingFunction>
												<CircleEase EasingMode="EaseOut" />
											</ThicknessAnimation.EasingFunction>
										</ThicknessAnimation>
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<ThicknessAnimation Storyboard.TargetProperty="BorderThickness"
															From="3"
															To="2"
															AccelerationRatio="0.8"
															Duration="0:0:0.2" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter Property="Background"
									TargetName="border"
									Value="{DynamicResource GlobalPressedBG}" />
							<Setter Property="BorderBrush"
									TargetName="border"
									Value="{DynamicResource GlobalPressedBD}" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Background"
									TargetName="border"
									Value="{StaticResource Button.Disabled.Background}" />
							<Setter Property="BorderBrush"
									TargetName="border"
									Value="{StaticResource Button.Disabled.Border}" />
							<Setter Property="TextElement.Foreground"
									TargetName="contentPresenter"
									Value="{StaticResource Button.Disabled.Foreground}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->
	<!--#region RadioButtonTabStyle-->
	<SolidColorBrush x:Key="RadioButton.MouseOver.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="RadioButton.MouseOver.Border"
					 Color="CornflowerBlue" />
	<SolidColorBrush x:Key="RadioButton.Pressed.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="RadioButton.Pressed.Border"
					 Color="#FF2C628B" />
	<SolidColorBrush x:Key="RadioButton.Disabled.Background"
					 Color="#FFE6E6E6" />
	<SolidColorBrush x:Key="RadioButton.Disabled.Border"
					 Color="#FFBCBCBC" />
	<Style x:Key="RadioButtonTabStyle"
		   TargetType="{x:Type RadioButton}">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="Foreground"
				Value="{DynamicResource GlobalFG}" />
		<Setter Property="BorderBrush"
				Value="CornflowerBlue" />
		<Setter Property="BorderThickness"
				Value="0" />
		<Setter Property="Focusable"
				Value="False" />
		<Setter Property="Padding"
				Value="8,4,8,6" />
		<Setter Property="FontSize"
				Value="14" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<Border x:Name="radioButtonBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true">
						<ContentPresenter x:Name="contentPresenter"
										  Focusable="False"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  Margin="{TemplateBinding Padding}"
										  RecognizesAccessKey="True"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver"
							   Value="True" />
					<Condition Property="IsChecked"
							   Value="False" />
				</MultiTrigger.Conditions>
				<MultiTrigger.EnterActions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation Storyboard.TargetProperty="BorderThickness"
												From="0"
												To="0,0,0,4"
												Duration="0:0:0.3">
								<ThicknessAnimation.EasingFunction>
									<CircleEase EasingMode="EaseOut" />
								</ThicknessAnimation.EasingFunction>
							</ThicknessAnimation>
							<ThicknessAnimation Storyboard.TargetProperty="Padding"
												From="8,4,8,6"
												To="8,4,8,2"
												Duration="0:0:0.3">
								<ThicknessAnimation.EasingFunction>
									<CircleEase EasingMode="EaseOut" />
								</ThicknessAnimation.EasingFunction>
							</ThicknessAnimation>
						</Storyboard>
					</BeginStoryboard>
				</MultiTrigger.EnterActions>
				<MultiTrigger.ExitActions>
					<BeginStoryboard>
						<Storyboard>
							<ThicknessAnimation Storyboard.TargetProperty="BorderThickness"
												From="0,0,0,4"
												To="0"
												Duration="0:0:0.4">
								<ThicknessAnimation.EasingFunction>
									<CircleEase EasingMode="EaseIn" />
								</ThicknessAnimation.EasingFunction>
							</ThicknessAnimation>
							<ThicknessAnimation Storyboard.TargetProperty="Padding"
												From="8,4,8,2"
												To="8,4,8,6"
												Duration="0:0:0.4">
								<ThicknessAnimation.EasingFunction>
									<CircleEase EasingMode="EaseIn" />
								</ThicknessAnimation.EasingFunction>
							</ThicknessAnimation>
						</Storyboard>
					</BeginStoryboard>
				</MultiTrigger.ExitActions>
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->
	<!--#region ThemeButtonStyle-->
	<Style x:Key="ThemeButtonStyle"
		   TargetType="{x:Type Button}">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderBrush"
				Value="Transparent" />
		<Setter Property="Foreground"
				Value="{DynamicResource GlobalFG}" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Padding"
				Value="0,0,0,2" />
		<Setter Property="Focusable"
				Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Border x:Name="border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true">
						<ContentPresenter x:Name="contentPresenter"
										  Focusable="False"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  Margin="{TemplateBinding Padding}"
										  RecognizesAccessKey="True"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Button.IsDefaulted"
								 Value="true">
							<Setter Property="BorderBrush"
									TargetName="border"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
						</Trigger>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Setter Property="Background"
									TargetName="border"
									Value="Transparent" />
							<Setter Property="BorderBrush"
									TargetName="border"
									Value="Transparent" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter Property="Background"
									TargetName="border"
									Value="Transparent" />
							<Setter Property="BorderBrush"
									TargetName="border"
									Value="Transparent" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Background"
									TargetName="border"
									Value="{StaticResource Button.Disabled.Background}" />
							<Setter Property="BorderBrush"
									TargetName="border"
									Value="{StaticResource Button.Disabled.Border}" />
							<Setter Property="TextElement.Foreground"
									TargetName="contentPresenter"
									Value="{StaticResource Button.Disabled.Foreground}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->
	<!--#region ComboBoxStyle-->
	<Style x:Key="ComboBoxEditableTextBox"
		   TargetType="{x:Type TextBox}">
		<Setter Property="Foreground"
				Value="{DynamicResource GlobalFG}" />
		<Setter Property="OverridesDefaultStyle"
				Value="true" />
		<Setter Property="AllowDrop"
				Value="true" />
		<Setter Property="MinWidth"
				Value="0" />
		<Setter Property="MinHeight"
				Value="0" />
		<Setter Property="ScrollViewer.PanningMode"
				Value="VerticalFirst" />
		<Setter Property="Stylus.IsFlicksEnabled"
				Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<ScrollViewer x:Name="PART_ContentHost"
								  Background="Transparent"
								  Focusable="false"
								  HorizontalScrollBarVisibility="Hidden"
								  VerticalScrollBarVisibility="Hidden" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<SolidColorBrush x:Key="ComboBox.Static.Border"
					 Color="#ABADB3" />
	<SolidColorBrush x:Key="ComboBox.Static.Glyph"
					 Color="Gray" />
	<SolidColorBrush x:Key="ComboBox.Static.Editable.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Static.Editable.Border"
					 Color="#ABADB3" />
	<SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Border"
					 Color="CornflowerBlue" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Glyph"
					 Color="CornflowerBlue" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border"
					 Color="CornflowerBlue" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border"
					 Color="CornflowerBlue" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Border"
					 Color="CornflowerBlue" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Glyph"
					 Color="CornflowerBlue" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border"
					 Color="CornflowerBlue" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border"
					 Color="CornflowerBlue" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Background"
					 Color="#FFF0F0F0" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Border"
					 Color="#FFD9D9D9" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Glyph"
					 Color="#FFBFBFBF" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background"
					 Color="#FFFFFFFF" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border"
					 Color="#FFBFBFBF" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background"
					 Color="Transparent" />
	<SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border"
					 Color="Transparent" />
	<Style x:Key="ComboBoxToggleButton"
		   TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle"
				Value="true" />
		<Setter Property="IsTabStop"
				Value="false" />
		<Setter Property="Focusable"
				Value="false" />
		<Setter Property="ClickMode"
				Value="Press" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="templateRoot"
							Background="{DynamicResource TextBoxBG}"
							BorderBrush="{StaticResource ComboBox.Static.Border}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="true">
						<Border x:Name="splitBorder"
								BorderBrush="Transparent"
								BorderThickness="1"
								HorizontalAlignment="Right"
								Margin="0"
								SnapsToDevicePixels="true"
								Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
							<Path x:Name="arrow"
								  Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"
								  Fill="{StaticResource ComboBox.Static.Glyph}"
								  HorizontalAlignment="Center"
								  Margin="0"
								  VerticalAlignment="Center" />
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="true" />
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
										   Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Static.Editable.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Static.Editable.Border}" />
							<Setter Property="Background"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Static.Editable.Button.Background}" />
							<Setter Property="BorderBrush"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Static.Editable.Button.Border}" />
						</MultiDataTrigger>
						<Trigger Property="IsMouseOver"
								 Value="true">
							<Setter Property="Fill"
									TargetName="arrow"
									Value="{StaticResource ComboBox.MouseOver.Glyph}" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.MouseOver.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.MouseOver.Border}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.MouseOver.Editable.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.MouseOver.Editable.Border}" />
							<Setter Property="Background"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}" />
							<Setter Property="BorderBrush"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}" />
						</MultiDataTrigger>
						<Trigger Property="IsPressed"
								 Value="true">
							<Setter Property="Fill"
									TargetName="arrow"
									Value="{StaticResource ComboBox.Pressed.Glyph}" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Pressed.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Pressed.Border}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
										   Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Pressed.Editable.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Pressed.Editable.Border}" />
							<Setter Property="Background"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}" />
							<Setter Property="BorderBrush"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}" />
						</MultiDataTrigger>
						<Trigger Property="IsEnabled"
								 Value="false">
							<Setter Property="Fill"
									TargetName="arrow"
									Value="{StaticResource ComboBox.Disabled.Glyph}" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Disabled.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Disabled.Border}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
										   Value="false" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
										   Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Background"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Disabled.Editable.Background}" />
							<Setter Property="BorderBrush"
									TargetName="templateRoot"
									Value="{StaticResource ComboBox.Disabled.Editable.Border}" />
							<Setter Property="Background"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}" />
							<Setter Property="BorderBrush"
									TargetName="splitBorder"
									Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="ComboBoxEditableTemplate"
					 TargetType="{x:Type ComboBox}">
		<Grid x:Name="templateRoot"
			  SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
								  Width="0" />
			</Grid.ColumnDefinitions>
			<Popup x:Name="PART_Popup"
				   AllowsTransparency="true"
				   Grid.ColumnSpan="2"
				   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
				   Placement="Bottom"
				   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
				<theme:SystemDropShadowChrome x:Name="shadow"
											  Color="Transparent"
											  MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
											  MaxHeight="{TemplateBinding MaxDropDownHeight}">
					<Border x:Name="dropDownBorder"
							Background="{DynamicResource GlobalBG}"
							BorderBrush="{StaticResource ComboBox.Pressed.Editable.Border}"
							BorderThickness="1">
						<ScrollViewer x:Name="DropDownScrollViewer">
							<Grid x:Name="grid"
								  RenderOptions.ClearTypeHint="Enabled">
								<Canvas x:Name="canvas"
										HorizontalAlignment="Left"
										Height="0"
										VerticalAlignment="Top"
										Width="0">
									<Rectangle x:Name="opaqueRect"
											   Fill="{Binding Background, ElementName=dropDownBorder}"
											   Height="{Binding ActualHeight, ElementName=dropDownBorder}"
											   Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
								</Canvas>
								<ItemsPresenter x:Name="ItemsPresenter"
												KeyboardNavigation.DirectionalNavigation="Contained"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Grid>
						</ScrollViewer>
					</Border>
				</theme:SystemDropShadowChrome>
			</Popup>
			<ToggleButton x:Name="toggleButton"
						  Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}"
						  Grid.ColumnSpan="2"
						  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
						  Style="{StaticResource ComboBoxToggleButton}" />
			<Border x:Name="border"
					Background="{DynamicResource TextBoxBG}"
					Margin="{TemplateBinding BorderThickness}">
				<TextBox x:Name="PART_EditableTextBox"
						 CaretBrush="{DynamicResource GlobalCaret}"
						 Foreground="{DynamicResource GlobalFG}"
						 Background="{DynamicResource TextBoxBG}"
						 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
						 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
						 Margin="{TemplateBinding Padding}"
						 Style="{StaticResource ComboBoxEditableTextBox}"
						 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled"
					 Value="false">
				<Setter Property="Opacity"
						TargetName="border"
						Value="0.56" />
			</Trigger>
			<Trigger Property="IsKeyboardFocusWithin"
					 Value="true">
				<Setter Property="Foreground"
						Value="Black" />
			</Trigger>
			<Trigger Property="HasDropShadow"
					 SourceName="PART_Popup"
					 Value="true">
				<Setter Property="Margin"
						TargetName="shadow"
						Value="0,0,5,5" />
				<Setter Property="Color"
						TargetName="shadow"
						Value="#71000000" />
			</Trigger>
			<Trigger Property="HasItems"
					 Value="false">
				<Setter Property="Height"
						TargetName="dropDownBorder"
						Value="95" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping"
							   Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping"
							   Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll"
						Value="false" />
			</MultiTrigger>
			<Trigger Property="ScrollViewer.CanContentScroll"
					 SourceName="DropDownScrollViewer"
					 Value="false">
				<Setter Property="Canvas.Top"
						TargetName="opaqueRect"
						Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
				<Setter Property="Canvas.Left"
						TargetName="opaqueRect"
						Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="ComboBoxTemplate"
					 TargetType="{x:Type ComboBox}">
		<Grid x:Name="templateRoot"
			  SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
								  Width="0" />
			</Grid.ColumnDefinitions>
			<Popup x:Name="PART_Popup"
				   AllowsTransparency="true"
				   Grid.ColumnSpan="2"
				   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
				   Margin="1"
				   Placement="Bottom"
				   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
				<theme:SystemDropShadowChrome x:Name="shadow"
											  Color="Transparent"
											  MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
											  MaxHeight="{TemplateBinding MaxDropDownHeight}">
					<Border x:Name="dropDownBorder"
							Background="{DynamicResource GlobalBG}"
							BorderBrush="{StaticResource ComboBox.Pressed.Editable.Border}"
							BorderThickness="1">
						<ScrollViewer x:Name="DropDownScrollViewer">
							<Grid x:Name="grid"
								  RenderOptions.ClearTypeHint="Enabled">
								<Canvas x:Name="canvas"
										HorizontalAlignment="Left"
										Height="0"
										VerticalAlignment="Top"
										Width="0">
									<Rectangle x:Name="opaqueRect"
											   Fill="{Binding Background, ElementName=dropDownBorder}"
											   Height="{Binding ActualHeight, ElementName=dropDownBorder}"
											   Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
								</Canvas>
								<ItemsPresenter x:Name="ItemsPresenter"
												KeyboardNavigation.DirectionalNavigation="Contained"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Grid>
						</ScrollViewer>
					</Border>
				</theme:SystemDropShadowChrome>
			</Popup>
			<ToggleButton x:Name="toggleButton"
						  Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}"
						  Grid.ColumnSpan="2"
						  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
						  Style="{StaticResource ComboBoxToggleButton}" />
			<ContentPresenter x:Name="contentPresenter"
							  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
							  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
							  Content="{TemplateBinding SelectionBoxItem}"
							  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
							  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							  IsHitTestVisible="false"
							  Margin="{TemplateBinding Padding}"
							  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasDropShadow"
					 SourceName="PART_Popup"
					 Value="true">
				<Setter Property="Margin"
						TargetName="shadow"
						Value="0,0,5,5" />
				<Setter Property="Color"
						TargetName="shadow"
						Value="#71000000" />
			</Trigger>
			<Trigger Property="HasItems"
					 Value="false">
				<Setter Property="Height"
						TargetName="dropDownBorder"
						Value="95" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping"
							   Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping"
							   Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll"
						Value="false" />
			</MultiTrigger>
			<Trigger Property="ScrollViewer.CanContentScroll"
					 SourceName="DropDownScrollViewer"
					 Value="false">
				<Setter Property="Canvas.Top"
						TargetName="opaqueRect"
						Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
				<Setter Property="Canvas.Left"
						TargetName="opaqueRect"
						Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="ComboBoxStyle"
		   TargetType="{x:Type ComboBox}">
		<Setter Property="Background"
				Value="{DynamicResource TextBoxBG}" />
		<Setter Property="BorderBrush"
				Value="{StaticResource ComboBox.Static.Border}" />
		<Setter Property="Foreground"
				Value="{DynamicResource GlobalFG}" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
				Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility"
				Value="Auto" />
		<Setter Property="Padding"
				Value="6,3,5,3" />
		<Setter Property="ScrollViewer.CanContentScroll"
				Value="true" />
		<Setter Property="ScrollViewer.PanningMode"
				Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled"
				Value="False" />
		<Setter Property="Template"
				Value="{StaticResource ComboBoxTemplate}" />
		<Style.Triggers>
			<Trigger Property="IsEditable"
					 Value="true">
				<Setter Property="IsTabStop"
						Value="false" />
				<Setter Property="Padding"
						Value="2" />
				<Setter Property="Template"
						Value="{StaticResource ComboBoxEditableTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->
	<!--#region DataGridStyle-->
	<BooleanToVisibilityConverter x:Key="NativeB2VC" />
	<Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}"
		   TargetType="{x:Type Button}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Rectangle x:Name="Border"
								   Fill="{DynamicResource TabMouseOverBD}"
								   SnapsToDevicePixels="True" />
						<Polygon x:Name="Arrow"
								 Fill="Black"
								 HorizontalAlignment="Right"
								 Margin="8,8,3,3"
								 Opacity="0.15"
								 Points="0,10 10,10 10,0"
								 Stretch="Uniform"
								 VerticalAlignment="Bottom" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Setter Property="Stroke"
									TargetName="Border"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="True">
							<Setter Property="Fill"
									TargetName="Border"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
						</Trigger>
						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter Property="Visibility"
									TargetName="Arrow"
									Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DataGridStyle"
		   TargetType="{x:Type DataGrid}">
		<Setter Property="GridLinesVisibility"
				Value="Horizontal" />
		<Setter Property="HorizontalGridLinesBrush"
				Value="{DynamicResource GlobalMouseoverBD}" />
		<Setter Property="Background"
				Value="{DynamicResource DataGridBG}" />
		<Setter Property="Foreground"
				Value="{DynamicResource GlobalFG}" />
		<Setter Property="RowBackground"
				Value="{DynamicResource GlobalBG}" />
		<Setter Property="BorderThickness"
				Value="0" />
		<Setter Property="RowDetailsVisibilityMode"
				Value="VisibleWhenSelected" />
		<Setter Property="ScrollViewer.CanContentScroll"
				Value="true" />
		<Setter Property="ScrollViewer.PanningMode"
				Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled"
				Value="False" />
		<Setter Property="RowHeaderStyle">
			<Setter.Value>
				<Style TargetType="{x:Type DataGridRowHeader}">
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type DataGridRowHeader}">
								<Grid>
									<Grid.Resources>
										<Style x:Key="RowHeaderGripperStyle"
											   TargetType="{x:Type Thumb}">
											<Setter Property="Height"
													Value="8" />
											<Setter Property="Background"
													Value="Transparent" />
											<Setter Property="Cursor"
													Value="SizeNS" />
											<Setter Property="Template">
												<Setter.Value>
													<ControlTemplate TargetType="{x:Type Thumb}">
														<Border Background="{TemplateBinding Background}"
																Padding="{TemplateBinding Padding}" />
													</ControlTemplate>
												</Setter.Value>
											</Setter>
										</Style>
									</Grid.Resources>
									<theme:DataGridHeaderBorder IsPressed="{TemplateBinding IsPressed}"
																IsHovered="{TemplateBinding IsMouseOver}"
																IsSelected="{TemplateBinding IsRowSelected}"
																Orientation="Horizontal"
																Padding="{TemplateBinding Padding}"
																SeparatorVisibility="{TemplateBinding SeparatorVisibility}"
																SeparatorBrush="{TemplateBinding SeparatorBrush}">
										<StackPanel Orientation="Horizontal">
											<ContentPresenter RecognizesAccessKey="True"
															  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
															  VerticalAlignment="Center" />
											<Control SnapsToDevicePixels="false"
													 Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"
													 Visibility="{Binding (Validation.HasError), Converter={StaticResource NativeB2VC}, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" />
										</StackPanel>
									</theme:DataGridHeaderBorder>
									<Thumb x:Name="PART_TopHeaderGripper"
										   Style="{StaticResource RowHeaderGripperStyle}"
										   VerticalAlignment="Top" />
									<Thumb x:Name="PART_BottomHeaderGripper"
										   Style="{StaticResource RowHeaderGripperStyle}"
										   VerticalAlignment="Bottom" />
								</Grid>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="CellStyle">
			<Setter.Value>
				<Style TargetType="{x:Type DataGridCell}">
					<Setter Property="Background"
							Value="{DynamicResource GlobalBG}" />
					<Setter Property="Foreground"
							Value="{DynamicResource GlobalFG}" />
					<Setter Property="BorderBrush"
							Value="{DynamicResource GlobalBG}" />
					<Setter Property="BorderThickness"
							Value="0" />
					<Setter Property="Padding"
							Value="2,5" />
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type DataGridCell}">
								<Border Padding="{TemplateBinding Padding}"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="{TemplateBinding BorderThickness}"
										Background="{TemplateBinding Background}"
										SnapsToDevicePixels="True">
									<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</Border>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
					<Style.Triggers>
						<Trigger Property="IsSelected"
								 Value="True">
							<Setter Property="Background"
									Value="DimGray" />
							<Setter Property="Foreground"
									Value="White" />
						</Trigger>
					</Style.Triggers>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="ColumnHeaderStyle">
			<Setter.Value>
				<Style TargetType="{x:Type DataGridColumnHeader}">
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*" />
										<ColumnDefinition Width="Auto" />
									</Grid.ColumnDefinitions>
									<Border BorderBrush="{DynamicResource GlobalFG}"
											BorderThickness="0,0,0,1" />
									<ContentPresenter Grid.Column="0"
													  Margin="6,3,6,3"
													  VerticalAlignment="Center" />
									<Path x:Name="SortArrow"
										  Grid.Column="1"
										  Width="8"
										  Height="6"
										  Stretch="Fill"
										  Fill="{TemplateBinding Foreground}"
										  Data="M 0 0 L 1 0 0.5 1 Z"
										  Visibility="Collapsed"
										  VerticalAlignment="Center"
										  RenderTransformOrigin="0.5, 0.4" />
									<Thumb x:Name="PART_RightHeaderGripper"
										   Grid.Column="1"
										   Width="6"
										   HorizontalAlignment="Right"
										   Cursor="SizeWE">
										<Thumb.Style>
											<Style TargetType="{x:Type Thumb}">
												<Setter Property="Background"
														Value="Transparent" />
												<Setter Property="Template">
													<Setter.Value>
														<ControlTemplate TargetType="{x:Type Thumb}">
															<Border Background="{TemplateBinding Background}"
																	Padding="{TemplateBinding Padding}" />
														</ControlTemplate>
													</Setter.Value>
												</Setter>
											</Style>
										</Thumb.Style>
									</Thumb>
								</Grid>
								<ControlTemplate.Triggers>
									<Trigger Property="SortDirection"
											 Value="{x:Null}">
										<Setter TargetName="SortArrow"
												Property="Visibility"
												Value="Collapsed" />
									</Trigger>
									<Trigger Property="SortDirection"
											 Value="Ascending">
										<Setter TargetName="SortArrow"
												Property="Visibility"
												Value="Visible" />
										<Setter TargetName="SortArrow"
												Property="RenderTransform">
											<Setter.Value>
												<RotateTransform Angle="-180" />
											</Setter.Value>
										</Setter>
									</Trigger>
									<Trigger Property="SortDirection"
											 Value="Descending">
										<Setter TargetName="SortArrow"
												Property="Visibility"
												Value="Visible" />
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGrid}">
					<Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}"
							SnapsToDevicePixels="True">
						<ScrollViewer x:Name="DG_ScrollViewer"
									  Focusable="false">
							<ScrollViewer.Template>
								<ControlTemplate TargetType="{x:Type ScrollViewer}">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="*" />
											<ColumnDefinition Width="Auto" />
										</Grid.ColumnDefinitions>
										<Grid.RowDefinitions>
											<RowDefinition Height="Auto" />
											<RowDefinition Height="*" />
											<RowDefinition Height="Auto" />
										</Grid.RowDefinitions>
										<Button Command="{x:Static DataGrid.SelectAllCommand}"
												Focusable="false"
												Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}"
												Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
												Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
										<DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter"
																		Grid.Column="1"
																		Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
										<ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
																CanContentScroll="{TemplateBinding CanContentScroll}"
																Grid.ColumnSpan="2"
																Grid.Row="1" />
										<ScrollBar x:Name="PART_VerticalScrollBar"
												   Grid.Column="2"
												   Maximum="{TemplateBinding ScrollableHeight}"
												   Orientation="Vertical"
												   Grid.Row="1"
												   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
												   ViewportSize="{TemplateBinding ViewportHeight}"
												   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
										<Grid Grid.Column="1"
											  Grid.Row="2">
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
												<ColumnDefinition Width="*" />
											</Grid.ColumnDefinitions>
											<ScrollBar x:Name="PART_HorizontalScrollBar"
													   Grid.Column="1"
													   Maximum="{TemplateBinding ScrollableWidth}"
													   Orientation="Horizontal"
													   Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
													   ViewportSize="{TemplateBinding ViewportWidth}"
													   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
										</Grid>
									</Grid>
								</ControlTemplate>
							</ScrollViewer.Template>
							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping"
							   Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping"
							   Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll"
						Value="false" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->
	<Converter:InvertedBool2VisibilityConverter x:Key="InvertedBool2VisibilityConverter" />
	<Converter:Bool2VisibilityConverter x:Key="Bool2VisibilityConverter" />
</ResourceDictionary>